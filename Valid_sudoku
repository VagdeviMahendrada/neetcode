import numpy as np
class Solution(object):
    def isValidSudoku(self, board):
        f=0
        cb=[]
        for i in range(9):
            r=[]
            r.append(board[0][i])
            r.append(board[1][i])
            r.append(board[2][i])
            r.append(board[3][i])
            r.append(board[4][i])
            r.append(board[5][i])
            r.append(board[6][i])
            r.append(board[7][i])
            r.append(board[8][i])
            cb.append(r)
        sb=[]
        s1=[]
        s2=[]
        s3=[]
        s4=[]
        s5=[]
        s6=[]
        s7=[]
        s8=[]
        s9=[]
        s1.append(board[0][0])
        s1.append(board[0][1])
        s1.append(board[0][2])
        s1.append(board[1][0])
        s1.append(board[1][1])
        s1.append(board[1][2])
        s1.append(board[2][0])
        s1.append(board[2][1])
        s1.append(board[2][2])
        sb.append(s1)
        s2.append(board[0][3])
        s2.append(board[0][4])
        s2.append(board[0][5])
        s2.append(board[1][3])
        s2.append(board[1][4])
        s2.append(board[1][5])
        s2.append(board[2][3])
        s2.append(board[2][4])
        s2.append(board[2][5])
        sb.append(s2)
        s3.append(board[0][6])
        s3.append(board[0][7])
        s3.append(board[0][8])
        s3.append(board[1][6])
        s3.append(board[1][7])
        s3.append(board[1][8])
        s3.append(board[2][6])
        s3.append(board[2][7])
        s3.append(board[2][8])
        sb.append(s3)
        s4.append(board[3][0])
        s4.append(board[3][1])
        s4.append(board[3][2])
        s4.append(board[4][0])
        s4.append(board[4][1])
        s4.append(board[4][2])
        s4.append(board[5][0])
        s4.append(board[5][1])
        s4.append(board[5][2])
        sb.append(s4)
        s5.append(board[3][3])
        s5.append(board[3][4])
        s5.append(board[3][5])
        s5.append(board[4][3])
        s5.append(board[4][4])
        s5.append(board[4][5])
        s5.append(board[5][3])
        s5.append(board[5][4])
        s5.append(board[5][5])
        sb.append(s5)
        s6.append(board[3][6])
        s6.append(board[3][7])
        s6.append(board[3][8])
        s6.append(board[4][6])
        s6.append(board[4][7])
        s6.append(board[4][8])
        s6.append(board[5][6])
        s6.append(board[5][7])
        s6.append(board[5][8])
        sb.append(s6)
        s7.append(board[6][0])
        s7.append(board[6][1])
        s7.append(board[6][2])
        s7.append(board[7][0])
        s7.append(board[7][1])
        s7.append(board[7][2])
        s7.append(board[8][0])
        s7.append(board[8][1])
        s7.append(board[8][2])
        sb.append(s7)
        s8.append(board[6][3])
        s8.append(board[6][4])
        s8.append(board[6][5])
        s8.append(board[7][3])
        s8.append(board[7][4])
        s8.append(board[7][5])
        s8.append(board[8][3])
        s8.append(board[8][4])
        s8.append(board[8][5])
        sb.append(s8)
        s9.append(board[6][6])
        s9.append(board[6][7])
        s9.append(board[6][8])
        s9.append(board[7][6])
        s9.append(board[7][7])
        s9.append(board[7][8])
        s9.append(board[8][6])
        s9.append(board[8][7])
        s9.append(board[8][8])
        sb.append(s9)
        print(sb)
        #sb,cb,board
        for i in sb:
            if i.count('1')>1 or i.count('2')>1 or i.count('3')>1 or i.count('4')>1 or i.count('5')>1 or i.count('6')>1 or i.count('7')>1 or i.count('8')>1 or i.count('9')>1:
                f=1
                break
        if not f:
            for i in cb:
                if i.count('1')>1 or i.count('2')>1 or i.count('3')>1 or i.count('4')>1 or i.count('5')>1 or i.count('6')>1 or i.count('7')>1 or i.count('8')>1 or i.count('9')>1:
                    f=1
                    break
        if not f:
            for i in board:
                if i.count('1')>1 or i.count('2')>1 or i.count('3')>1 or i.count('4')>1 or i.count('5')>1 or i.count('6')>1 or i.count('7')>1 or i.count('8')>1 or i.count('9')>1:
                    f=1
                    break
        if not f:
            return True
        else:
            return False
